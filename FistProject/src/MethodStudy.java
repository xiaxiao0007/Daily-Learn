/*
1.应该在Java语言当中有这样的一种机制:
    -某个功能代码只需要写一遍
    -要使用这个功能。只需要给这个功能传递具体的数据
    -这个功能完成之后返回一个最终的结果
    这样代码就可以重复利用，提高代码复用性。【这就是“方法”】
2.使用这个方法我们称为“调用/invoke”
方法的本质是什么？
    方法【C语言中函数/Function】就是一段代码片段，并且这段代码片段可以完成某个特定的功能，并且可以被重复的使用
3.方法定义在类体当中，在一个类当中可以定义多个方法，方法编写的位置没有先后顺序。
  方法体中不能再定义方法
 */
/*
1.方法怎么定义，语法结构：
    [修饰符列表] 返回值类型(void除外) 方法名(形式参数列表){
        方法体;
        return 字面值;
    }
2.对以上的语法结构进行解释说明:
    2.1 关于修饰符列表
        -可选项，不是必须的
        -目前统一写成:public static【以后再讲】
        -方法的修饰列表当中"有static关键字"的话，怎么调用这个方法？
            -类名.方法名(实际参数列表);
    2.2 返回值类型
            -什么是返回值？
                一个方法是可以完成某个特定功能的，这个功能结束之后大多数都是需要返回最终得执行结果，
                执行结果可能是一个具体的数据，而这个具体存在得数据就是返回值
            -返回值类型？
                返回值是一个具体存在得数据，数据都是有类型得，此处需要指定的是返回值(这个数据)的具体类型
            -返回值类型都可以指定那些类型呢？
                Java任意一种类型都可以，包括基本数据类型和所有的引用数据类型。
            -也可能这个方法执行结束之后不返回任何数据，Java中规定，当一个方法执行结束之后不返回任何数据的
             话，返回值类型位置必须编写:void关键字。
            -返回值类型若不是void，表示这个方法执行结束之后必须返回一个具体的数值。
             当方法执行结束的时候没有返回任何数据的话编译器报错。怎么返回值呢？代码怎么写呢？
             "return 值;",并且要求“值”的数据类型必须和“方法的返回值类型”一致，不然编译器报错。
            -返回值类型是void的时候，在方法体当中不能编写“return 值”，这样的语句。但是要注意可以
             编写“return;”这样的语句
            -只要带有return关键自的语句执行，return语句所在的方法结束。【不是jvm结束，而是此方法的结束】
    2.3 方法名
        合法的标识符
    2.4 形式参数列表
        形参是局部变量
        形参的个数可以是：0~N个
        多个形参之间用“逗号”隔开
        形参中起决定性作用的是形参的数据类型，形参的名字就是局部变量的名字
        方法再调用的时候，实际给这个方法传递的真实数据被称为:实际参数，简称实参
        实参列表和形参列表必须满足：数量相同，类型对应相同
    2.5 方法体必须由大括号括起来，方法体当中的代码顺序，遵循自上而下的顺序依次执行。
        并且方法体有Java语句构成，每一个Java语句以“;”结尾。
3.方法怎么调用？
    方法只定义不去调用时不会执行的，只是在调用的时候才会执行。
    语法规则：《方法的修饰符列表当中有static》
        类名.方法名(实参列表);这是一条Java语句，表示调用某个类的某个方法，传递这样的实参。
 */
/*
方法的调用不一定在main方法中，可以在其它方法当中。只要是程序可以执行到的位置，都可以去调用其它方法。
方法调用:
    1.方法的修饰符列表当中有static关键字，完整的调用方式是:类名.方法名(实参列表)
    2.但是，有时候“类名”，可以省略，什么情况下可以省略不写呢？
        方法在同一个类体中的时候
    3.建议在一个Java源文件当中只定义一个class，比较清晰
    4.空参数列表也可以运行
 */
/*
深入return语句
    1.带有return关键字的Java语句只要执行，所在的方法执行结束
    2.在“同一个作用域”当中，return语句下面不能编写任何代码，因为这些代码永远都执行不到，所以编译报错
    3.return 表达式(值/变量名);
在返回值类型是void的方法当中使用“return;”语句,“return;”语句出现在返回值为void的方法当中主要是为了用来结束当前方法。
 */
/*
方法在执行过程当中，在JAM中的内存是如何分配的，内存是如何变化的？
    1.方法只定义，不调用，是不会执行的，并且在JVM中也不会给该方法分配“运行所属”的内存空间。
      只有在调用这个方法的时候，才会动态的给这个方法分配所属的内存空间。
    2.在JVM内存划分上有这样三块主要的内存空间(当然除了这三块之外还有其它的内存空间)
        方法区内存
        堆内存【主要存储局部变量】
        栈内存
    3.方法代码片段存在哪里？方法执行的时候执行过程的内存在哪里？
        -方法代码片段属于.class字节码文件的一部分，字节码文件在类加载的时候，将其放到了方法区当中。
         所以JVM中的三块主要的内存空间中方法区内存最先有数据，存放了代码片段。
        -代码片段虽然在方法区内存当中只有一份，但是可以被重复调用。每一次调用这个方法的时候，【这个调用是副本进入栈内存，还是直接原本进行栈内存中】
         需要给该方法分配独立的活动场所，在栈内存中分配。【栈内存中分配方法运行的所属内存空间】
    4.方法在调用的时候，会在该方法分配独立的内存空间，在栈中分配，此时发生压栈动作，方法执行结束之后，
      给该方法分配的内存空间全部释放，此时发生弹栈动作。
    5.局部变量在运行阶段在栈中分配，局部变量在“方法体”中声明。
 */
/*
方法的执行内存分析
    重点:方法调用的时候，在参数传递的时候，实际上传递的是变量中保存的那个“值”传过去了。
方法重载机制/overload【void 方法名(参数列表)】
    1.什么时候考虑使用方法重载？
        在同一个类中出现功能相似的时候，尽可能让方法名相同。但是，功能不同/不相似的时候，尽可能让方法不同。
    2.什么条件满足之后构成了方法重载？
        在同一个类中
        方法名相同
        参数列表不同
            -数量不同
            -顺序不同
            -类型不同
    3.方法重载和什么有关系，和什么没关系？
        方法重载和方法名，参数列表有关系，方法重载和返回值类型无关，方法重载和修饰符列表无关
 */
/*
方法的递归调用
    1.什么是递归？【递归要有出口】
        方法自身调用自身。
            a(){
                a();
            }
    2.递归是很耗费栈内存的，递归算法可以不用的时候尽量不用
    3.递归必须有结束条件，没有结束条件一定会发生栈内存溢出错误。
    4.递归即使有了结束条件，即使结束条件是正确的，也可能会发生内存溢出错误。因为递归得太深了。
 */

//public表示公开的
//class表示定义类
//MethodStudy是一个类名
public class MethodStudy {
    //类体
    //类体中不能直接编写Java语句，除声明变量之外，【成员变量】
    //方法出现在类体当中
    int a=0;
    //方法
    //public表示公开的。public关键字是什么意思？
    //static表示静态的
    //void表示方法执行结束之后不返回任何数据
    //main是方法名:主方法
    //(String[] args):形式参数列表，其中String[]是一种引用数据类型，args是一个局部变量的变量名
    //所有以下只有args这个局部变量的变量名是随意的
    //主方法就需要这样固定编写，这是程序的入口。【SUN规定的，必须这样写】
    public static void main(String[] args){
        //MethodStudy.sum(10,20);

        //一个方法可以重复调用
        //int a = 100;
        //MethodStudy.sum(a,10);

        //int b=20;
        //int c=30;
        //MethodStudy.sum(b,c);


        //int d=10;
        //int e=2;
        //divde(d,e);//这里没有接受这个方法的返回值,可以接受，也可以不接受
        //这里接收一下方法执行结束之后返回值
        //采用变量接收
        //变量的数据类型需要和返回值的数据类型相同，或者可以自动类型转换
        //赋值运算符的右边先执行，将执行结果赋值给左边的变量
        //int f=divde(d,e);
        //System.out.println(f);

        //递归求和
        int n = 4;
        int result = sum(n);
        System.out.println(result);

    }

    //自定义方法，不是程序的入口
    //public static void sum(int x,int y){// 变量x,y是局部变量，只作用在sum方法里面
        //System.out.println(x+y);
    //}

    //public static int divde(int x,int y){
        //return x+y;//可以返回变量名，值，表达式
    //}
    /*
    public static void m(){
        for (int i=0;i<10;i++){
            if (i==5){
                return;//不是终止for循环，终止是m()方法
                //break;终止for循环
            }
            System.out.println("i-->"+i);
        }
        System.out.println("Hello World");
    }
 */

    //递归求和
   public static int sum(int n){
       if(n == 1){
           return 1;//返回给倒数第二个函数一个值
       }
       return n*sum(n-1);
   }

}

