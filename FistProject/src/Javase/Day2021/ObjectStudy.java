package Javase.Day2021;/*
面向过程和面向对象的区别
    -面向过程主要关注得是:具体得实现过程，因果关系
        优点：对于业务逻辑比较简单的程序，可以达到快速开发，前期投入成本较低。
        缺点:采用面向过程的方式开发很难解决非常复杂的业务逻辑，另外面向过程的方式导致软件元素之间的“耦合度”
            非常高，只要其中一环出问题，整个系统受到影响，导致最终的软件扩展力差。另外，由于没有独立体的
            概念，所以无法达到组件复用。
    -面向对象主要关注点是：关注对象能完成那些功能
        优点：耦合度低，扩展能力强。更容易解决现实世界当中更复杂的业务逻辑。组件的复用性强
        缺点：前期投入成本较高，需要进行独立体的抽取，大量的系统分析设计
 */
/*
面向对象的三大特征
    -封装
    -继承
    -多态
采用面向对象的方式开发一个软件，生命周期当中【整个生命周期中贯穿使用oo面向对象方式】
    面向对象的分析：OOA
    面向对象的设计：OOD
    面向对象的编程：OOP
 */
/*
类和对象的概念
    1.什么是类？
        -对现实世界相似对象的一般性(所有相似对象的相同点的抽象)抽象出来的概念
    2.什么是对象？
        -现实世界存在的个体
    3.类--【实例化】-->对象
      对象--【抽象】-->类
      重点：类描述的是对象的共同特征
    4.一个类主要描述什么信息呢？
        描述的信息：状态(属性)+动作(方法)
        注意:状态和动作当具体到某个对象上之后，发现最终结果可能不一样。
            对象和对象之间有共同特征，但是具体到对象之后有数据的差异。
 */
/*
类的定义
    语法结构:
        [修饰符列表] class 类名{
            属性;(描述的是对象的状态信息)//成员变量，这个数据就是反应这个属性,而数据必须要有类型。
            方法;(描述的是对象的动作信息)//函数
        }
        重点:属性通常由变量的形式来完成定义的
        eg:
            public class Student{//引用类型数据
                int number;
                Boolean sex;
                String name;
            }
    【使用类需要创建一个对象 new Student();】
 */
/*
对象的创建和使用
    1.实例化对象的语法：new 类名();【创建一个实例的对象】
    2.堆内存：new的对象在堆内存中。
    3.Student stu = new Student();
        其中stu是”引用“【引用就是c语言中的指针】【保存的是内存的地址，由创建对象时给予】
 */
/*【重要】
1.JVM(JVM虚拟机)主要包括三块内存空间，分别是：栈内存，堆内存，方法区内存
2.堆内存和方法区内存各有一个，一个线程一个栈内存
3.方法调用的时候，该方法所需要的内存空间在栈内存中分配，称为压栈。方法执行结束之后，该方法所属的内存空间释放，称为出栈。
4.栈内存中主要存储是方法体中的局部变量。
5.方法的代码片段以及整个类的代码片段都被存储到方法区当中，当类加载的时候这些代码片段会载入
6.在程序执行过程中使用new运算符创建的java对象，存储在堆内存当中。对象内部有实例变量，所以实例变量存储在堆内存当中。
7.变量分类
    -局部变量【方法体中声明】
    -成员变量【方法体外声明】
        实例变量【前面修饰符没有static】
        静态变量【前面修饰符有static】
8.静态变量存储在方法区内存当中
9.三块内存当中变化最频繁的是栈内存，最先有数据的是方法区，垃圾回收器主要针对的是堆内存
10.垃圾回收器【自动垃圾回收机制，GC机制】什么时候考虑将某个Java对象的内存回收呢？
    当堆内存当中的Java对象成为垃圾数据的时候，会被垃圾回收器回收
    什么时候堆内存中Java对象会变成垃圾呢？
        没有更多的引用指向它的时候。
        这个对象无法访问，因为访问对象只能通过引用的方式访问。
 */
/*
面向对象的封装性
    为什么要封装？封装有什么好处？
        封装的好处:
            1.封装之后，对于那个事物比较复杂的那一面，只能看到该事物简单的那一面。复杂封装，对外提供简单的操作入口。
            2.封装之后才会形成真正的“对象”，真正的“独立体”
            3.封装意味着以后的程序可以重复使用，并且这个事物应该适应性比较强，在任何场合都可以使用。
            4.封装之后，对于事物本身，提高了安全性。【安全级别高】
    封装的步骤:
        1.所有属性私有化，使用private关键字进行修饰，private表示私有的，修饰的所有数据只能在本类中访问。
        2.对外提供简单的操作入口，也就是说以后外部程序想访问age属性，必须通过这些简单的入口进行访问:
            对外提供两个公开的方法，分别set方法和get方法
            想修改age属性，调用set方法
            想读取age属性，调用get方法
        3.set方法的命名规范:
            public void setAge(变量名首字母大写)(int a){
                age =a;
            }
        4.get方法的命名规范:
            public int getAge(变量名首字母大写){
                return age;
            }
        5.可以在setter和getter中设置安全控制机制
 */
/*
【创建一个对象的语法结构:new 方法名();】
setter and getter方法没有static关键字
有static关键字修饰的方法怎么调用:类名.方法名;
没有static关键字修饰的方法怎么调用:引用.方法名;
 */
/*
关于Java类中构造方法:
    1.构造方法又称为构造函数/构造器/Constructor
    2.构造方法语法结构:
        [修饰符列表] 构造方法名(形式参数列表){
            构造方法体;
        }
    3.回顾普通方法的语法结构:
        [修饰符列表] 返回值类型 方法名(形式参数列表){
            方法体;
        }
    4.对于构造方法来说，“返回值类型”不需要指定，并且也不能写void，只要写上void，那么这个方法就是普通方法了。
    5.对于构造方法来说，构造方法的方法名必须和类名保持一致。
    6.构造方法的作用:
        构造方法存在的意义是，通过构造方法调用，可以创建对象。【创建一个指针】
    7.构造方法应该怎么调用?
        -普通方法是这样调用的:方法修饰符中有static的时候:类名.方法名(实参列表),方法修饰符中没有static的时候:引用.方法名(实参列表)。
        -new 构造方法名(实参列表)
    8.构造方法调用执行之后，有返回值么?
        每一个构造方法实际上执行结束之后都有返回值，但是这个"return 值;"这样的语句不需要写。构造方法结束的时候Java程序自动返回值。
        并且返回值类型是构造方法所在的类型。由于构造方法的返回值类型就是本身，所以返回值类型不需要编写。
    9.当一个类中没有定义任何构造方法的话，系统默认给该类型提供一个无参数的构造方法，这个构造方法被称为缺省构造器
    10.当一个类显示的将构造方法定义出来了，那么系统则不再默认为这个类提供缺省构造器.建议开发中手动的为当前类提供无参数构造方法。
    11.构造方法支持重载机制。再一个类当中编写多个构造方法，这多个构造方法显然已经构成方法重载机制。
    12.构造方法的作用:
        1.创建对象
        2.创建对象的同时，初始化实例变量的内存空间。【给实例变量赋值】
 */
/*
对象和引用
    1.对象和引用的概念?
        对象:目前再使用new运算符再堆内存中开辟的内存空间称为对象
        引用:是一个变量，不一定是局部变量，还可能是成员变量。引用保存了内存地址，指向了堆内存当中的对象。
        所有访问实例相关的数据，都需要通过“引用.”的方式访问，因为只有通过引用才能找到对象。
        只有一个空引用，访问对象的实例相关的数据会出现空指针异常
            class Student{
                Computer com;//com是一个引用【实力变量】
                public static void doSome(){
                    Computer cc;//cc是一个引用【局部变量】
                }
            }
    2.参数的传递?
        (1)参数传递实际上传递的是变量保存的具体值
        (2)方法调用的时候，涉及到参数传递问题，传递的时候，Java只遵循一种语法机制，就是将变量中保存的“值”传递过去了，
           只不过有时候这个值是一个字面值10，有时候这个值是另一个Java对象的内存地址0x1234
        (3)User u = 0x1234
           User u2 = u;
           u传递给u2，实际上是将0x1234这个值赋值给u2了，u和u2实际上是两个不同的局部变量
           但是他们这两个变量指向内存中同一个java对象。

 */

//描述所有学生的共同特征【状态+行为】
//当前类只描述学生的状态信息【属性】
public class ObjectStudy {
    //类体 = 属性+方法

    //所有学生都有学号信息
    //但是每一个学生的学号都是不同的
    /*
    所以要访问这个学号必须先创建对象，通过对象去访问学号信息，
    学号信息不能直接通过“类”去访问，所以这种成员变量又被叫做：实例变量
    不创建对象，这个no变量的内存空间是不存在的，只有创建了对象，这个no变量【实例变量】内存空间才会创建
     */
    int no;

    //姓名
    String name;

    //年龄
    int age;
}

