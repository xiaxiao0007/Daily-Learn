/*
什么时候成员变量声明为实例变量呢？
    -所有对象都有这个属性，但是这个属性的值会随着对象的变化而变化
什么时候成员变量声明为静态变量呢？
    -所有对象都有这个属性，并且所有对象的这个属性值是一样的，建议定义为静态变量，节省内存的开销
静态变量在类加载的时候初始化，内存在方法区中开辟。访问的时候不需要创建对象，直接使用"类名.属性名"的方式访问。
关于Java中static关键字
    1.static英语单词翻译为静态的
    2.static修饰的方法是静态方法
    3.static修饰的变量是静态变量
    4.所有static修饰的元素都称为静态的，都可以使用"类名."的方式访问，当然也可以用"引用."的方式访问【但不建议】
可以使用static关键字来定义"静态代码块":
    1.语法格式:
        static{
            java语句;
        }
    2.静态代码块在类加载时执行，并且只执行一次
    3.静态代码块在一个类中可以编写多个，并且遵循自上而下的顺序依次执行。
    4.静态代码块的作用什么？怎么用？用在哪里？什么时候用？
        -这当然和具体的需求有关，例如项目中要求在类加载的时刻/时机执行代码完成日志的记录
         那么这段记录日志的代码就可以编写到静态代码块中，完成日志记录
        -静态代码块时Java为程序员准备一个特殊时刻，这个特殊时刻被称为类加载时刻。若希望在此刻执行一段特殊的程序，
         这段程序可以直接放到静态代码块当中。
实例语句块/代码块
    1.实例代码块可以编写多个，也是遵循自上而下的顺序依次执行
    2.实例代码块在构造方法之前执行，构造方法执行一次，实例代码块对应执行一次。
    3.实例代码块也是Java语言为程序员准备一个特殊的时机，这个特殊时机被称为:对象初始化时机。
方法什么时候定义为静态的？
    方法描述的是动作，当所有的对象执行这个动作的时候，最终产生影响是一样的，那么这个动作已经不在属于某一个对象动作了，
    可以将这个动作提升为类级别的动作，模板级的动作。
静态方法不能直接访问实例变量和实例方法

class 类{
    静态代码块;
    实例代码块

    静态变量;
    实例变量;

    构造方法;

    静态方法;
    实例方法;
    }
 */
package StaticKey;

//public表示公开的，在任何位置都是可以访问。
public class ChineseTest01 {

    //静态方法是通过类去调用的，没有对象的调用
    public static void main(String[] args){

        Chinese chinese01 = new Chinese(1,"张三");

        Chinese.setCountry("中国");

        System.out.println(chinese01.getId()+" "+chinese01.getName()+" "+Chinese.getCountry());

    }
}
