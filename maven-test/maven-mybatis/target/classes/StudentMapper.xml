<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 用来写sql语句的 -->
<!--
    mapper:是整个文件的大标签，用来开始和结束xml文件
    属性：
        namespace：指定命名空间，用来区分不同mapper.xml文件中相同的id属性
-->
<mapper namespace="xxf">
    <!--定义代码片段-->
    <sql id="allColumns">
        id,name,email,age
    </sql>

    <!--
        完成查询全部学生的功能
        返回值类型：List<Student> getAll();
            resultType:指定查询返回的结果类型，如果返回的结果是集合，则必须是泛型的类型
            parameterType：如果有参数，则通过它来指定参数的类型,参数是传入sql语句的参数
            id:用于区分不同的select标签
    -->
    <select id="getAll" resultType="student">
        select <include refid="allColumns"></include>
        from student
    </select>

    <!--
    按主键id查询学生信息
    返回值类型：Student getById(Integer id);
    -->
    <select id="getById" parameterType="int" resultType="student">
        select <include refid="allColumns"></include>
        from student
        where id=#{id}
    </select>

    <!--
    按学生名称模糊查询
    返回值类型：List<Student> getByName(String name);
    -->
    <select id="getByName" parameterType="string" resultType="student">
        select <include refid="allColumns"></include>
        from student
        where name like '${name}'
    </select>

    <!--
        增加学生
        int insert(Student stu);
    -->
    <insert id="insert" parameterType="student">
        insert into student (name,email,age ) values(#{name},#{email},#{age})
    </insert>

    <!--
        按主键删除学生
        int delete(Integer id)
    -->
    <delete id="delete" parameterType="int">
        delete from student where id=#{id}
    </delete>

    <!--
        更新学生
        int update(Student stu);
    -->
    <update id="update" parameterType="student">
        update student set name=#{name},email=#{email},age=#{age}
        where id=#{id}
    </update>
</mapper>